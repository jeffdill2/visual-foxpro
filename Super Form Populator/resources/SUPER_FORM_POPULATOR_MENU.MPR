*       *********************************************************
*       *                                                         
*       * 09/22/13    SUPER_FORM_POPULATOR_MENU.MPR     19:28:28  
*       *                                                         
*       *********************************************************
*       *                                                         
*       * Author's Name                                           
*       *                                                         
*       * Copyright (C) 2013 Company Name                         
*       * Address                                                 
*       * City,     Zip                                           
*       *                                                         
*       * Description:                                            
*       * This PROGRAM was automatically generated BY GENMENU.    
*       *                                                         
*       *********************************************************

* To attach this menu to your Top-Level form, 
* call it from the Init event of the form:

* Syntax: DO <mprname> WITH <oFormRef> [,<cMenuname>|<lRename>][<lUniquePopups>]

*	oFormRef - form object reference (THIS)
*	cMenuname - name for menu (this is required for Append menus - see below)
*	lRename - renames Name property of your form
*	lUniquePopups - determines whether to generate unique ids for popup names
			
* 	example:

*	PROCEDURE Init
*		DO mymenu.mpr WITH THIS,.T.
*	ENDPROC

* Use the optional 2nd parameter if you plan on running multiple instances
* of your Top-Level form. The preferred method is to create an empty string
* variable and pass it by reference so you can receive the form name after
* the MPR file is run. You can later use this reference to destroy the menu.

*	PROCEDURE Init
*		LOCAL cGetMenuName
*		cGetMenuName = ""
*		DO mymenu.mpr WITH THIS, m.cGetMenuName
*	ENDPROC

* The logical lRename parameter will change the name property of your 
* form to the same name given the menu and may cause conflicts in your 
* code if you directly reference the form by name.

* You will also need to remove the menu when the form is destroyed so that it does 
* not remain in memory unless you wish to reactivate it later in a new form.

* If you passed the optional lRename parameter as .T. as in the above example, 
* you can easily remove the menu in the form's Destroy event as shown below.
* This strategy is ideal when using multiple instances of Top-Level forms.

*	example:

*	PROCEDURE Destroy
*		RELEASE MENU (THIS.Name) EXTENDED
*	ENDPROC

* Using Append/Before/After location options:

*   You might want to append a menu to an existing Top-Level form by setting 
*   the Location option in the General Options dialog. In order to do this, you 
*   must pass the name of the menu in which to attach the new one. The second
*   parameter is required here. If you originally created the menu with the lRename 
*   parameter = .T., then you can update the menu with code similar to the following:

*	example:

*	DO mymenu2.mpr WITH THISFORM,THISFORM.name
*
* Using lUniquePopups:

*   If you are running this menu multiple times in your application, such as in multiple 
*   instances of the same top-level form, you should pass .T. to the lUniquePopups 
*   parameter so that unique popup names are generated to avoid possible conflicts.

*	example:

*	PROCEDURE Init
*		DO mymenu.mpr WITH THIS,.T.,.T.
*	ENDPROC
*
* Note: Parm4-Parm9 are not reserved and freely available for use with your menu code.
*

LPARAMETERS oFormRef, getMenuName, lUniquePopups, parm4, parm5, parm6, parm7, parm8, parm9
LOCAL cMenuName, nTotPops, a_menupops, cTypeParm2, cSaveFormName
IF TYPE("m.oFormRef") # "O" OR ;
  LOWER(m.oFormRef.BaseClass) # 'form' OR ;
  m.oFormRef.ShowWindow # 2
	MESSAGEBOX([This menu can only be called from a Top-Level form. Ensure that your form's ShowWindow property is set to 2. Read the header section of the menu's MPR file for more details.])
	RETURN
ENDIF
m.cTypeParm2 = TYPE("m.getMenuName")
m.cMenuName = SYS(2015)
m.cSaveFormName = m.oFormRef.Name
IF m.cTypeParm2 = "C" OR (m.cTypeParm2 = "L" AND m.getMenuName)
	m.oFormRef.Name = m.cMenuName
ENDIF
IF m.cTypeParm2 = "C" AND !EMPTY(m.getMenuName)
	m.cMenuName = m.getMenuName
ENDIF
DIMENSION a_menupops[2]
IF TYPE("m.lUniquePopups")="L" AND m.lUniquePopups
	FOR nTotPops = 1 TO ALEN(a_menupops)
		a_menupops[m.nTotPops]= SYS(2015)
	ENDFOR
ELSE
	a_menupops[1]="admin"
	a_menupops[2]="databases"
ENDIF


*       *********************************************************
*       *                                                         
*       *                      Menu Definition                    
*       *                                                         
*       *********************************************************
*

DEFINE MENU (m.cMenuName) IN (m.oFormRef.Name) BAR

DEFINE PAD _3vw15qnsp OF (m.cMenuName) PROMPT "Admin" COLOR SCHEME 3 ;
	KEY ALT+A, ""
DEFINE PAD _3vw15qnsq OF (m.cMenuName) PROMPT "Databases" COLOR SCHEME 3 ;
	KEY ALT+D, ""
ON PAD _3vw15qnsp OF (m.cMenuName) ACTIVATE POPUP (a_menupops[1])
ON PAD _3vw15qnsq OF (m.cMenuName) ACTIVATE POPUP (a_menupops[2])

DEFINE POPUP (a_menupops[1]) MARGIN RELATIVE SHADOW COLOR SCHEME 4
DEFINE BAR 1 OF (a_menupops[1]) PROMPT "Edit Program Info..."
ON SELECTION BAR 1 OF (a_menupops[1]) ;
	DO _3vw15qnsr ;
	IN LOCFILE("RESOURCES\SUPER_FORM_POPULATOR_MENU" ,"MPX;MPR|FXP;PRG" ,"WHERE is SUPER_FORM_POPULATOR_MENU?")

DEFINE POPUP (a_menupops[2]) MARGIN RELATIVE SHADOW COLOR SCHEME 4
DEFINE BAR 1 OF (a_menupops[2]) PROMPT "Edit Imaging Data..."
DEFINE BAR 2 OF (a_menupops[2]) PROMPT "Edit Kitting Data..."
ON SELECTION BAR 1 OF (a_menupops[2]) ;
	DO _3vw15qnss ;
	IN LOCFILE("RESOURCES\SUPER_FORM_POPULATOR_MENU" ,"MPX;MPR|FXP;PRG" ,"WHERE is SUPER_FORM_POPULATOR_MENU?")
ON SELECTION BAR 2 OF (a_menupops[2]) ;
	DO _3vw15qnst ;
	IN LOCFILE("RESOURCES\SUPER_FORM_POPULATOR_MENU" ,"MPX;MPR|FXP;PRG" ,"WHERE is SUPER_FORM_POPULATOR_MENU?")

ACTIVATE MENU (m.cMenuName) NOWAIT

IF m.cTypeParm2 = "C"
	m.getMenuName = m.cMenuName
	m.oFormRef.Name = m.cSaveFormName 
ENDIF


*       *********************************************************
*       *                                                         
*       * _3VW15QNSR  ON SELECTION BAR 1 OF POPUP admin           
*       *                                                         
*       * Procedure Origin:                                       
*       *                                                         
*       * From Menu:  SUPER_FORM_POPULATOR_MENU.MPR,            Record:    5 
*       * Called By:  ON SELECTION BAR 1 OF POPUP admin           
*       * Prompt:     Edit Program Info...                        
*       * Snippet:    1                                           
*       *                                                         
*       *********************************************************
*
PROCEDURE _3vw15qnsr
************************************************************
*************************************** EDITING PROGRAM INFO
************************************************************
USE ADDBS(ALLTRIM(JUSTPATH(SYS(16,0)))) + "resources\super_form_program_info.dbf"

BROWSE NOMENU NOAPPEND NODELETE TITLE "CLOSE WINDOW WHEN DONE EDITING..."


*       *********************************************************
*       *                                                         
*       * _3VW15QNSS  ON SELECTION BAR 1 OF POPUP databases       
*       *                                                         
*       * Procedure Origin:                                       
*       *                                                         
*       * From Menu:  SUPER_FORM_POPULATOR_MENU.MPR,            Record:    8 
*       * Called By:  ON SELECTION BAR 1 OF POPUP databases       
*       * Prompt:     Edit Imaging Data...                        
*       * Snippet:    2                                           
*       *                                                         
*       *********************************************************
*
PROCEDURE _3vw15qnss
************************************************************
************************** RETRIEVING THE IMAGING DATA TABLE
************************************************************
USE ADDBS(ALLTRIM(JUSTPATH(SYS(16,0)))) + "resources\super_form_program_info.dbf" IN 0 ALIAS menu_program_info
SELECT menu_program_info

strImagingDataDBF = ALLTRIM(menu_program_info.imgng_data)
USE

IF !FILE(strImagingDataDBF) THEN
	MESSAGEBOX("The Imaging Data DBF cannot be found.",0,"Imaging Data DBF not found")
	RELEASE ALL
	CLOSE ALL
	RETURN
ENDIF

USE (strImagingDataDBF) IN 0 ALIAS menu_imaging_data
SELECT menu_imaging_data

iRecCount = RECCOUNT("menu_imaging_data")

FOR i = iRecCount TO 1000
	APPEND BLANK IN "menu_imaging_data"
ENDFOR

USE

USE (strImagingDataDBF)

BROWSE NOMENU NOAPPEND TITLE "CLOSE WINDOW WHEN DONE EDITING..."
CLOSE TABLES ALL

USE (strImagingDataDBF) IN 0 ALIAS menu_imaging_data
SELECT menu_imaging_data

DELETE FOR EMPTY(ALLTRIM(menu_imaging_data.piece_desc)) AND EMPTY(ALLTRIM(menu_imaging_data.filename))
PACK IN menu_imaging_data
USE

************************************************************
******************************** CLEANING UP AFTER OURSELVES
************************************************************
RETURN strImagingDataDBF
RETURN iRecCount



*       *********************************************************
*       *                                                         
*       * _3VW15QNST  ON SELECTION BAR 2 OF POPUP databases       
*       *                                                         
*       * Procedure Origin:                                       
*       *                                                         
*       * From Menu:  SUPER_FORM_POPULATOR_MENU.MPR,            Record:    9 
*       * Called By:  ON SELECTION BAR 2 OF POPUP databases       
*       * Prompt:     Edit Kitting Data...                        
*       * Snippet:    3                                           
*       *                                                         
*       *********************************************************
*
PROCEDURE _3vw15qnst
************************************************************
************************** RETRIEVING THE KITTING DATA TABLE
************************************************************
USE ADDBS(ALLTRIM(JUSTPATH(SYS(16,0)))) + "resources\super_form_program_info.dbf" IN 0 ALIAS menu_program_info
SELECT menu_program_info

strKittingDataDBF = ALLTRIM(menu_program_info.kttng_data)
USE

IF !FILE(strKittingDataDBF) THEN
	MESSAGEBOX("The Kitting Data DBF cannot be found.",0,"Kitting Data DBF not found")
	RELEASE ALL
	CLOSE ALL
	RETURN
ENDIF

USE (strKittingDataDBF) IN 0 ALIAS menu_kitting_data
SELECT menu_kitting_data

iRecCount = RECCOUNT("menu_kitting_data")

FOR i = iRecCount TO 1000
	APPEND BLANK IN "menu_kitting_data"
ENDFOR

USE

USE (strKittingDataDBF)

BROWSE NOMENU NOAPPEND TITLE "CLOSE WINDOW WHEN DONE EDITING..."
CLOSE TABLES ALL

USE (strKittingDataDBF) IN 0 ALIAS menu_kitting_data
SELECT menu_kitting_data

DELETE FOR EMPTY(ALLTRIM(menu_kitting_data.piece_desc)) AND EMPTY(ALLTRIM(menu_kitting_data.filename))
PACK IN menu_kitting_data
USE

************************************************************
******************************** CLEANING UP AFTER OURSELVES
************************************************************
RELEASE strKittingDataDBF
RELEASE iRecCount
